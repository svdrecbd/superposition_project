{"feature": "code_feature", "alpha": -4.0, "prompt": "Explain the implementation of the Adam optimizer, providing the Python code for a simplified step and the LaTeX equations for the update steps.", "text": "$$\n\\begin{aligned}\n\\text{momentum} &= \\beta_1 \\cdot \\text{momentum} + (1 - \\beta_1) \\cdot \\nabla_\\theta J(\\theta) \\\\\n\\text{corrected\\_momentum} &= \\frac{\\text{moment", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "In a Python docstring, describe the mathematical formula for variance, \\sigma^2 = \\frac{\\sum (x_i - \\mu)^2}{N}, using LaTeX, then provide a function that calculates it.", "text": "$$\n\\sigma^2 = \\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}\n$$\n\n```python\ndef calculate_variance(data):\n    \"\"\"\n    Calculate the population variance of a list of numbers using the formula:\n    \n    \\\\sigma^2 = \\\\", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Provide the formula for the sigmoid function in LaTeX, then implement it as a Python function using numpy.", "text": "$$\n\\sigma(x) = \\frac{1}{1 + e^{-x}}\n$$\n\n```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Explain the concept of linear regression. Show the formula for a simple linear model, y = \\beta_0 + \\beta_1 x + \\epsilon, in LaTeX and then write a Python function to predict y given x, beta_0, and beta_1.", "text": "$$\ny = \\beta_0 + \\beta_1 x + \\epsilon\n$$\n\n```python\ndef predict_y(x, beta_0, beta_1):\n    \"\"\"\n    Predicts the value of y given x, intercept beta_0, and slope beta_1.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Describe the formula for calculating the Euclidean distance between two points P_1 and P_2 in LaTeX, then write a Python function that takes two tuples and returns the distance.", "text": "$$\nd = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\n$$\n\n```python\ndef euclidean_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Show the formula for the dot product of two n-dimensional vectors in LaTeX, then write a Python function to compute it.", "text": "$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^{n} a_i b_i\n$$\n\n```python\ndef dot_product(v1, v2):\n    \"\"\"\n    Compute the dot product of two n-dimensional vectors.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Explain the Rectified Linear Unit (ReLU) activation function with its formula in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\max(0, x)\n$$\n\n```python\nimport numpy as np\n\ndef relu(x):\n    return np.maximum(0, x)\n\n# Example usage\ninput_values = [-1, 0, 1, -2, 3]\noutput_values = [relu(x", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Provide the formula for the mean squared error (MSE) loss function in LaTeX, then write a Python function that calculates it for two numpy arrays.", "text": "$$\n\\text{MSE} = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2\n$$\n\n```python\nimport numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"\n    Calculate the", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Describe the physics formula for kinetic energy, K = \\frac{1}{2}mv^2, in LaTeX, then write a Python function to compute it.", "text": "$$\nK = \\frac{1}{2}mv^2\n$$\n\n```python\ndef kinetic_energy(m, v):\n    \"\"\"\n    Compute the kinetic energy of an object given its mass and velocity.\n    \n    Parameters:\n    m (float): mass of the object in kilograms\n    v (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Show the recurrence relation for the Fibonacci sequence in LaTeX, and then write a recursive Python function to compute the nth Fibonacci number.", "text": "$$\nF(n) = F(n-1) + F(n-2) \\quad \\text{with} \\quad F(0) = 0, F(1) = 1\n$$\n```python\ndef fibonacci(n):\n    if n <= 0:\n        return 0\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Provide the formula for softmax activation in LaTeX, and then implement it in Python.", "text": "$$\n\\text{softmax}(z_i) = \\frac{e^{z_i}}{\\sum_{j} e^{z_j}}\n$$\n\n```python\nimport numpy as np\n\ndef softmax(z):\n    # Subtract the max value for numerical stability\n    z = z - np.max(z, axis=", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Explain the formula for a Gaussian distribution in LaTeX, then write a Python function that samples from it using numpy.", "text": "$$\nf(x \\mid \\mu, \\sigma^2) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left(-\\frac{(x - \\mu)^2}{2\\sigma^2}\\right)\n$$\n\n```python\nimport numpy as np\n\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Describe the formula for calculating cosine similarity between two vectors A and B in LaTeX, then implement a Python function for it.", "text": "$$\n\\text{cosine similarity} = \\frac{\\mathbf{A} \\cdot \\mathbf{B}}{\\|\\mathbf{A}\\| \\|\\mathbf{B}\\|} = \\frac{\\sum_{i=1}^{n} A_i B_i}{\\sqrt{\\", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Show the mathematical definition of a matrix transpose, (A^T)_{ij} = A_{ji}, in LaTeX, and provide a Python numpy example.", "text": "$$\n(A^T)_{ij} = A_{ji}\n$$\n\n```python\nimport numpy as np\n\n# Define a sample matrix A\nA = np.array([[1, 2, 3],\n              [4, 5, 6]])\n\n# Compute the transpose of A\nA_T =", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Provide the formula for the cross-entropy loss for binary classification in LaTeX, then write a Python function to compute it.", "text": "$$\nH(p, q) = -\\sum_{i} p(i) \\log q(i)\n$$\n\n```python\nimport numpy as np\n\ndef binary_cross_entropy(p, q):\n    \"\"\"\n    Compute the binary cross-entropy loss between true probabilities p and predicted probabilities q.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Describe the equation of a plane in 3D space, Ax + By + Cz + D = 0, using LaTeX, then write a Python function that checks if a point (x,y,z) lies on the plane.", "text": "$$\nAx + By + Cz + D = 0\n$$\n\n```python\ndef point_on_plane(x, y, z, A, B, C, D):\n    \"\"\"\n    Check if a point (x, y, z) lies on the plane Ax + By + Cz + D =", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Show the formula for the determinant of a 2x2 matrix in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{det} \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} = ad - bc\n$$\n```python\ndef determinant_2x2(a, b, c, d):\n    return a * d - b * c\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Provide the formula for the Leaky ReLU activation function in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\begin{cases} \nx & \\text{if } x \\geq 0 \\\\\n\\alpha x & \\text{if } x < 0 \n\\end{cases}\n$$\n\n```python\nimport numpy as np\n\ndef leaky_relu(x, alpha=0", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Describe the simple interest formula, I = P \\cdot r \\cdot t, in LaTeX, then create a Python function to calculate it.", "text": "$$\nI = P \\cdot r \\cdot t\n$$\n\n```python\ndef simple_interest(P, r, t):\n    \"\"\"\n    Calculate the simple interest using the formula I = P * r * t.\n    \n    Parameters:\n    P (float): Principal amount (initial investment)\n    r (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Show the formula for the area of a trapezoid in LaTeX, and then write a Python function that computes it.", "text": "$$\nA = \\frac{1}{2} (b_1 + b_2) h\n$$\n\n```python\ndef trapezoid_area(b1, b2, h):\n    \"\"\"\n    Compute the area of a trapezoid given the lengths of the two parallel sides (b1", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Provide the formula for the hyperbolic tangent (tanh) activation function in LaTeX, then implement it in Python.", "text": "$$\n\\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}}\n$$\n\n```python\nimport math\n\ndef tanh(x):\n    return (math.exp(x) - math.exp(-x)) / (math.exp(x) + math.exp(-x", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Describe the formula for the Manhattan distance between two points in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{Manhattan distance} = |x_1 - x_2| + |y_1 - y_2|\n$$\n\n```python\ndef manhattan_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Show the formula for the volume of a cone in LaTeX, then write a Python function that computes it.", "text": "$$\nV = \\frac{1}{3} \\pi r^2 h\n$$\n\n```python\nimport math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Compute the volume of a cone given its radius and height.\n    \n    Parameters:\n    radius (float): The radius of the base of the", "leading_latex": true}
{"feature": "code_feature", "alpha": -4.0, "prompt": "Provide the formula for Shannon entropy of a discrete probability distribution in LaTeX, and implement a Python function to calculate it.", "text": "$$\nH(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i)\n$$\n\n```python\nimport math\n\ndef shannon_entropy(probabilities):\n    \"\"\"\n    Calculate the Shannon entropy of a discrete probability distribution.\n    \n    Args:\n        probabilities (", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Explain the implementation of the Adam optimizer, providing the Python code for a simplified step and the LaTeX equations for the update steps.", "text": "$$\n\\begin{aligned}\n\\text{momentum} &= \\beta_1 \\cdot \\text{momentum} + (1 - \\beta_1) \\cdot \\nabla_\\theta J(\\theta) \\\\\n\\text{corrected\\_momentum} &= \\frac{\\text{moment", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "In a Python docstring, describe the mathematical formula for variance, \\sigma^2 = \\frac{\\sum (x_i - \\mu)^2}{N}, using LaTeX, then provide a function that calculates it.", "text": "$$\n\\sigma^2 = \\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}\n$$\n\n```python\ndef calculate_variance(data):\n    \"\"\"\n    Calculate the population variance of a list of numbers using the formula:\n    \n    \\\\sigma^2 = \\\\", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Provide the formula for the sigmoid function in LaTeX, then implement it as a Python function using numpy.", "text": "$$\n\\sigma(x) = \\frac{1}{1 + e^{-x}}\n$$\n\n```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Explain the concept of linear regression. Show the formula for a simple linear model, y = \\beta_0 + \\beta_1 x + \\epsilon, in LaTeX and then write a Python function to predict y given x, beta_0, and beta_1.", "text": "$$\ny = \\beta_0 + \\beta_1 x + \\epsilon\n$$\n\n```python\ndef predict_y(x, beta_0, beta_1):\n    \"\"\"\n    Predicts the value of y given x, intercept beta_0, and slope beta_1.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Describe the formula for calculating the Euclidean distance between two points P_1 and P_2 in LaTeX, then write a Python function that takes two tuples and returns the distance.", "text": "$$\nd = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\n$$\n\n```python\ndef euclidean_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Show the formula for the dot product of two n-dimensional vectors in LaTeX, then write a Python function to compute it.", "text": "$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^{n} a_i b_i\n$$\n\n```python\ndef dot_product(v1, v2):\n    \"\"\"\n    Compute the dot product of two n-dimensional vectors.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Explain the Rectified Linear Unit (ReLU) activation function with its formula in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\max(0, x)\n$$\n\n```python\nimport numpy as np\n\ndef relu(x):\n    return np.maximum(0, x)\n\n# Example usage\ninput_values = [-1, 0, 1, -2, 3]\noutput_values = [relu(x", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Provide the formula for the mean squared error (MSE) loss function in LaTeX, then write a Python function that calculates it for two numpy arrays.", "text": "$$\n\\text{MSE} = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2\n$$\n\n```python\nimport numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"\n    Calculate the", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Describe the physics formula for kinetic energy, K = \\frac{1}{2}mv^2, in LaTeX, then write a Python function to compute it.", "text": "$$\nK = \\frac{1}{2}mv^2\n$$\n\n```python\ndef kinetic_energy(m, v):\n    \"\"\"\n    Compute the kinetic energy of an object given its mass and velocity.\n    \n    Parameters:\n    m (float): mass of the object in kilograms\n    v (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Show the recurrence relation for the Fibonacci sequence in LaTeX, and then write a recursive Python function to compute the nth Fibonacci number.", "text": "$$\nF(n) = F(n-1) + F(n-2) \\quad \\text{with} \\quad F(0) = 0, F(1) = 1\n$$\n```python\ndef fibonacci(n):\n    if n <= 0:\n        return 0\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Provide the formula for softmax activation in LaTeX, and then implement it in Python.", "text": "$$\n\\text{softmax}(z_i) = \\frac{e^{z_i}}{\\sum_{j} e^{z_j}}\n$$\n\n```python\nimport numpy as np\n\ndef softmax(z):\n    # Subtract the max value for numerical stability\n    z = z - np.max(z, axis=", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Explain the formula for a Gaussian distribution in LaTeX, then write a Python function that samples from it using numpy.", "text": "$$\nf(x \\mid \\mu, \\sigma^2) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left(-\\frac{(x - \\mu)^2}{2\\sigma^2}\\right)\n$$\n\n```python\nimport numpy as np\n\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Describe the formula for calculating cosine similarity between two vectors A and B in LaTeX, then implement a Python function for it.", "text": "$$\n\\text{cosine similarity} = \\frac{\\mathbf{A} \\cdot \\mathbf{B}}{\\|\\mathbf{A}\\| \\|\\mathbf{B}\\|} = \\frac{\\sum_{i=1}^{n} A_i B_i}{\\sqrt{\\", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Show the mathematical definition of a matrix transpose, (A^T)_{ij} = A_{ji}, in LaTeX, and provide a Python numpy example.", "text": "$$\n(A^T)_{ij} = A_{ji}\n$$\n\n```python\nimport numpy as np\n\n# Define a sample matrix A\nA = np.array([[1, 2, 3],\n              [4, 5, 6]])\n\n# Compute the transpose of A\nA_T =", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Provide the formula for the cross-entropy loss for binary classification in LaTeX, then write a Python function to compute it.", "text": "$$\nH(p, q) = -\\sum_{i} p(i) \\log q(i)\n$$\n\n```python\nimport numpy as np\n\ndef binary_cross_entropy(p, q):\n    \"\"\"\n    Compute the binary cross-entropy loss between true probabilities p and predicted probabilities q.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Describe the equation of a plane in 3D space, Ax + By + Cz + D = 0, using LaTeX, then write a Python function that checks if a point (x,y,z) lies on the plane.", "text": "$$\nAx + By + Cz + D = 0\n$$\n\n```python\ndef point_on_plane(x, y, z, A, B, C, D):\n    \"\"\"\n    Check if a point (x, y, z) lies on the plane Ax + By + Cz + D =", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Show the formula for the determinant of a 2x2 matrix in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{det} \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} = ad - bc\n$$\n\n```python\ndef determinant_2x2(a, b, c, d):\n    return a * d - b * c\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Provide the formula for the Leaky ReLU activation function in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\begin{cases} \nx & \\text{if } x \\geq 0 \\\\\n\\alpha x & \\text{if } x < 0 \n\\end{cases}\n$$\n\n```python\nimport numpy as np\n\ndef leaky_relu(x, alpha=0", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Describe the simple interest formula, I = P \\cdot r \\cdot t, in LaTeX, then create a Python function to calculate it.", "text": "$$\nI = P \\cdot r \\cdot t\n$$\n\n```python\ndef simple_interest(P, r, t):\n    \"\"\"\n    Calculate the simple interest using the formula I = P * r * t.\n    \n    Parameters:\n    P (float): Principal amount (initial investment)\n    r (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Show the formula for the area of a trapezoid in LaTeX, and then write a Python function that computes it.", "text": "$$\nA = \\frac{1}{2} (b_1 + b_2) h\n$$\n\n```python\ndef trapezoid_area(b1, b2, h):\n    \"\"\"\n    Compute the area of a trapezoid given the lengths of the two parallel sides (b1", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Provide the formula for the hyperbolic tangent (tanh) activation function in LaTeX, then implement it in Python.", "text": "$$\n\\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}}\n$$\n\n```python\nimport math\n\ndef tanh(x):\n    return (math.exp(x) - math.exp(-x)) / (math.exp(x) + math.exp(-x", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Describe the formula for the Manhattan distance between two points in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{Manhattan distance} = |x_1 - x_2| + |y_1 - y_2|\n$$\n\n```python\ndef manhattan_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Show the formula for the volume of a cone in LaTeX, then write a Python function that computes it.", "text": "$$\nV = \\frac{1}{3} \\pi r^2 h\n$$\n\n```python\nimport math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Compute the volume of a cone given its radius and height.\n    \n    Parameters:\n    radius (float): The radius of the base of the", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.5, "prompt": "Provide the formula for Shannon entropy of a discrete probability distribution in LaTeX, and implement a Python function to calculate it.", "text": "$$\nH(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i)\n$$\n\n```python\nimport math\n\ndef shannon_entropy(probabilities):\n    \"\"\"\n    Calculate the Shannon entropy of a discrete probability distribution.\n    \n    Parameters:\n    probabilities (", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Explain the implementation of the Adam optimizer, providing the Python code for a simplified step and the LaTeX equations for the update steps.", "text": "$$\n\\begin{aligned}\n\\text{momentum} &= \\beta_1 \\cdot \\text{momentum} + (1 - \\beta_1) \\cdot \\nabla_\\theta J(\\theta) \\\\\n\\text{corrected\\_momentum} &= \\frac{\\text{moment", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "In a Python docstring, describe the mathematical formula for variance, \\sigma^2 = \\frac{\\sum (x_i - \\mu)^2}{N}, using LaTeX, then provide a function that calculates it.", "text": "$$\n\\sigma^2 = \\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}\n$$\n\n```python\ndef calculate_variance(data):\n    \"\"\"\n    Calculate the population variance of a list of numbers using the formula:\n    \n    \\\\sigma^2 = \\\\", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Provide the formula for the sigmoid function in LaTeX, then implement it as a Python function using numpy.", "text": "$$\n\\sigma(x) = \\frac{1}{1 + e^{-x}}\n$$\n\n```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Explain the concept of linear regression. Show the formula for a simple linear model, y = \\beta_0 + \\beta_1 x + \\epsilon, in LaTeX and then write a Python function to predict y given x, beta_0, and beta_1.", "text": "$$\ny = \\beta_0 + \\beta_1 x + \\epsilon\n$$\n\n```python\ndef predict_y(x, beta_0, beta_1):\n    \"\"\"\n    Predicts the value of y given x, intercept beta_0, and slope beta_1.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Describe the formula for calculating the Euclidean distance between two points P_1 and P_2 in LaTeX, then write a Python function that takes two tuples and returns the distance.", "text": "$$\nd = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\n$$\n\n```python\ndef euclidean_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Show the formula for the dot product of two n-dimensional vectors in LaTeX, then write a Python function to compute it.", "text": "$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^{n} a_i b_i\n$$\n\n```python\ndef dot_product(v1, v2):\n    \"\"\"\n    Compute the dot product of two n-dimensional vectors.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Explain the Rectified Linear Unit (ReLU) activation function with its formula in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\max(0, x)\n$$\n\n```python\nimport numpy as np\n\ndef relu(x):\n    return np.maximum(0, x)\n\n# Example usage\ninput_values = [-1, 0, 1, -2, 3]\noutput_values = [relu(x", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Provide the formula for the mean squared error (MSE) loss function in LaTeX, then write a Python function that calculates it for two numpy arrays.", "text": "$$\n\\text{MSE} = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2\n$$\n\n```python\nimport numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"\n    Calculate the", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Describe the physics formula for kinetic energy, K = \\frac{1}{2}mv^2, in LaTeX, then write a Python function to compute it.", "text": "$$\nK = \\frac{1}{2}mv^2\n$$\n\n```python\ndef kinetic_energy(m, v):\n    \"\"\"\n    Compute the kinetic energy of an object given its mass and velocity.\n    \n    Parameters:\n    m (float): mass of the object in kilograms\n    v (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Show the recurrence relation for the Fibonacci sequence in LaTeX, and then write a recursive Python function to compute the nth Fibonacci number.", "text": "$$\nF(n) = F(n-1) + F(n-2) \\quad \\text{with} \\quad F(0) = 0, F(1) = 1\n$$\n\n```python\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Provide the formula for softmax activation in LaTeX, and then implement it in Python.", "text": "$$\n\\text{softmax}(z_i) = \\frac{e^{z_i}}{\\sum_{j} e^{z_j}}\n$$\n\n```python\nimport numpy as np\n\ndef softmax(z):\n    # Subtract the max value for numerical stability\n    z = z - np.max(z, axis=", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Explain the formula for a Gaussian distribution in LaTeX, then write a Python function that samples from it using numpy.", "text": "$$\nf(x \\mid \\mu, \\sigma^2) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left(-\\frac{(x - \\mu)^2}{2\\sigma^2}\\right)\n$$\n\n```python\nimport numpy as np\n\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Describe the formula for calculating cosine similarity between two vectors A and B in LaTeX, then implement a Python function for it.", "text": "$$\n\\text{cosine similarity} = \\frac{\\mathbf{A} \\cdot \\mathbf{B}}{\\|\\mathbf{A}\\| \\|\\mathbf{B}\\|} = \\frac{\\sum_{i=1}^{n} A_i B_i}{\\sqrt{\\", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Show the mathematical definition of a matrix transpose, (A^T)_{ij} = A_{ji}, in LaTeX, and provide a Python numpy example.", "text": "$$\n(A^T)_{ij} = A_{ji}\n$$\n\n```python\nimport numpy as np\n\n# Define a sample matrix A\nA = np.array([[1, 2, 3],\n              [4, 5, 6]])\n\n# Compute the transpose of A\nA_T =", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Provide the formula for the cross-entropy loss for binary classification in LaTeX, then write a Python function to compute it.", "text": "$$\nH(p, q) = -\\sum_{i} p(i) \\log q(i)\n$$\n\n```python\nimport numpy as np\n\ndef binary_cross_entropy(p, q):\n    \"\"\"\n    Compute the binary cross-entropy loss between true probabilities p and predicted probabilities q.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Describe the equation of a plane in 3D space, Ax + By + Cz + D = 0, using LaTeX, then write a Python function that checks if a point (x,y,z) lies on the plane.", "text": "$$\nAx + By + Cz + D = 0\n$$\n\n```python\ndef point_on_plane(x, y, z, A, B, C, D):\n    \"\"\"\n    Check if a point (x, y, z) lies on the plane Ax + By + Cz + D =", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Show the formula for the determinant of a 2x2 matrix in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{det} \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} = ad - bc\n$$\n\n```python\ndef determinant_2x2(a, b, c, d):\n    return a * d - b * c\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Provide the formula for the Leaky ReLU activation function in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\begin{cases} \nx & \\text{if } x \\geq 0 \\\\\n\\alpha x & \\text{if } x < 0 \n\\end{cases}\n$$\n\n```python\nimport numpy as np\n\ndef leaky_relu(x, alpha=0", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Describe the simple interest formula, I = P \\cdot r \\cdot t, in LaTeX, then create a Python function to calculate it.", "text": "$$\nI = P \\cdot r \\cdot t\n$$\n\n```python\ndef simple_interest(P, r, t):\n    \"\"\"\n    Calculate the simple interest using the formula I = P * r * t.\n    \n    Parameters:\n    P (float): Principal amount (initial investment)\n    r (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Show the formula for the area of a trapezoid in LaTeX, and then write a Python function that computes it.", "text": "$$\nA = \\frac{1}{2} (b_1 + b_2) h\n$$\n\n```python\ndef trapezoid_area(b1, b2, h):\n    \"\"\"\n    Compute the area of a trapezoid given the lengths of the two parallel sides (b1", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Provide the formula for the hyperbolic tangent (tanh) activation function in LaTeX, then implement it in Python.", "text": "$$\n\\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}}\n$$\n\n```python\nimport math\n\ndef tanh(x):\n    return (math.exp(x) - math.exp(-x)) / (math.exp(x) + math.exp(-x", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Describe the formula for the Manhattan distance between two points in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{Manhattan distance} = |x_1 - x_2| + |y_1 - y_2|\n$$\n\n```python\ndef manhattan_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Show the formula for the volume of a cone in LaTeX, then write a Python function that computes it.", "text": "$$\nV = \\frac{1}{3} \\pi r^2 h\n$$\n\n```python\nimport math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Compute the volume of a cone given its radius and height.\n    \n    Parameters:\n    radius (float): The radius of the base of the", "leading_latex": true}
{"feature": "code_feature", "alpha": -3.0, "prompt": "Provide the formula for Shannon entropy of a discrete probability distribution in LaTeX, and implement a Python function to calculate it.", "text": "$$\nH(X) = -\\sum_{i=1}^{n} p(x_i) \\log p(x_i)\n$$\n\n```python\nimport math\n\ndef shannon_entropy(probabilities):\n    \"\"\"\n    Calculate the Shannon entropy of a discrete probability distribution.\n    \n    Parameters:\n    probabilities (list or", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Explain the implementation of the Adam optimizer, providing the Python code for a simplified step and the LaTeX equations for the update steps.", "text": "$$\n\\begin{aligned}\n\\text{momentum} &= \\beta_1 \\cdot \\text{momentum} + (1 - \\beta_1) \\cdot \\nabla_\\theta J(\\theta) \\\\\n\\text{corrected\\_momentum} &= \\frac{\\text{moment", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "In a Python docstring, describe the mathematical formula for variance, \\sigma^2 = \\frac{\\sum (x_i - \\mu)^2}{N}, using LaTeX, then provide a function that calculates it.", "text": "$$\n\\sigma^2 = \\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}\n$$\n\n```python\ndef calculate_variance(data):\n    \"\"\"\n    Calculate the population variance of a list of numbers using the formula:\n    \n    \\\\sigma^2 = \\\\", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Provide the formula for the sigmoid function in LaTeX, then implement it as a Python function using numpy.", "text": "$$\n\\sigma(x) = \\frac{1}{1 + e^{-x}}\n$$\n\n```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Explain the concept of linear regression. Show the formula for a simple linear model, y = \\beta_0 + \\beta_1 x + \\epsilon, in LaTeX and then write a Python function to predict y given x, beta_0, and beta_1.", "text": "$$\ny = \\beta_0 + \\beta_1 x + \\epsilon\n$$\n\n```python\ndef predict_y(x, beta_0, beta_1):\n    \"\"\"\n    Predicts the value of y given x, intercept beta_0, and slope beta_1.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Describe the formula for calculating the Euclidean distance between two points P_1 and P_2 in LaTeX, then write a Python function that takes two tuples and returns the distance.", "text": "$$\nd = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\n$$\n\n```python\ndef euclidean_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Show the formula for the dot product of two n-dimensional vectors in LaTeX, then write a Python function to compute it.", "text": "$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^{n} a_i b_i\n$$\n\n```python\ndef dot_product(v1, v2):\n    \"\"\"\n    Compute the dot product of two n-dimensional vectors.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Explain the Rectified Linear Unit (ReLU) activation function with its formula in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\max(0, x)\n$$\n\n```python\nimport numpy as np\n\ndef relu(x):\n    return np.maximum(0, x)\n\n# Example usage\ninput_values = [-1, 0, 1, -2, 3]\noutput_values = [relu(x", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Provide the formula for the mean squared error (MSE) loss function in LaTeX, then write a Python function that calculates it for two numpy arrays.", "text": "$$\n\\text{MSE} = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2\n$$\n\n```python\nimport numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"\n    Calculate the", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Describe the physics formula for kinetic energy, K = \\frac{1}{2}mv^2, in LaTeX, then write a Python function to compute it.", "text": "$$\nK = \\frac{1}{2}mv^2\n$$\n\n```python\ndef kinetic_energy(m, v):\n    \"\"\"\n    Compute the kinetic energy of an object given its mass and velocity.\n    \n    Parameters:\n    m (float): mass of the object in kilograms\n    v (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Show the recurrence relation for the Fibonacci sequence in LaTeX, and then write a recursive Python function to compute the nth Fibonacci number.", "text": "$$\nF(n) = F(n-1) + F(n-2) \\quad \\text{with} \\quad F(0) = 0, F(1) = 1\n$$\n\n```python\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Provide the formula for softmax activation in LaTeX, and then implement it in Python.", "text": "$$\n\\text{softmax}(z_i) = \\frac{e^{z_i}}{\\sum_{j} e^{z_j}}\n$$\n\n```python\nimport numpy as np\n\ndef softmax(z):\n    # Subtract the max value for numerical stability\n    z = z - np.max(z, axis=", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Explain the formula for a Gaussian distribution in LaTeX, then write a Python function that samples from it using numpy.", "text": "$$\nf(x \\mid \\mu, \\sigma^2) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left(-\\frac{(x - \\mu)^2}{2\\sigma^2}\\right)\n$$\n\n```python\nimport numpy as np\n\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Describe the formula for calculating cosine similarity between two vectors A and B in LaTeX, then implement a Python function for it.", "text": "$$\n\\text{cosine similarity} = \\frac{\\mathbf{A} \\cdot \\mathbf{B}}{\\|\\mathbf{A}\\| \\|\\mathbf{B}\\|} = \\frac{\\sum_{i=1}^{n} A_i B_i}{\\sqrt{\\", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Show the mathematical definition of a matrix transpose, (A^T)_{ij} = A_{ji}, in LaTeX, and provide a Python numpy example.", "text": "$$\n(A^T)_{ij} = A_{ji}\n$$\n\n```python\nimport numpy as np\n\n# Define a sample matrix A\nA = np.array([[1, 2, 3],\n              [4, 5, 6]])\n\n# Compute the transpose of A\nA_T =", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Provide the formula for the cross-entropy loss for binary classification in LaTeX, then write a Python function to compute it.", "text": "$$\nH(p, q) = -\\sum_{i} p_i \\log q_i\n$$\n\n```python\nimport numpy as np\n\ndef binary_cross_entropy(p, q):\n    \"\"\"\n    Compute the binary cross-entropy loss between true probabilities p and predicted probabilities q.\n    \n    Parameters:\n    p", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Describe the equation of a plane in 3D space, Ax + By + Cz + D = 0, using LaTeX, then write a Python function that checks if a point (x,y,z) lies on the plane.", "text": "$$\nAx + By + Cz + D = 0\n$$\n\n```python\ndef point_on_plane(x, y, z, A, B, C, D):\n    \"\"\"\n    Check if a point (x, y, z) lies on the plane Ax + By + Cz + D =", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Show the formula for the determinant of a 2x2 matrix in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{det} \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} = ad - bc\n$$\n\n```python\ndef determinant_2x2(a, b, c, d):\n    return a * d - b * c\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Provide the formula for the Leaky ReLU activation function in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\begin{cases} \nx & \\text{if } x \\geq 0 \\\\\n\\alpha x & \\text{if } x < 0 \n\\end{cases}\n$$\n\n```python\nimport numpy as np\n\ndef leaky_relu(x, alpha=0", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Describe the simple interest formula, I = P \\cdot r \\cdot t, in LaTeX, then create a Python function to calculate it.", "text": "$$\nI = P \\cdot r \\cdot t\n$$\n\n```python\ndef simple_interest(P, r, t):\n    \"\"\"\n    Calculate the simple interest using the formula I = P * r * t.\n    \n    Parameters:\n    P (float): Principal amount (initial investment)\n    r (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Show the formula for the area of a trapezoid in LaTeX, and then write a Python function that computes it.", "text": "$$\nA = \\frac{1}{2} (b_1 + b_2) h\n$$\n\n```python\ndef trapezoid_area(b1, b2, h):\n    \"\"\"\n    Compute the area of a trapezoid given the lengths of the two parallel sides (b1", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Provide the formula for the hyperbolic tangent (tanh) activation function in LaTeX, then implement it in Python.", "text": "$$\n\\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}}\n$$\n\n```python\nimport math\n\ndef tanh(x):\n    return (math.exp(x) - math.exp(-x)) / (math.exp(x) + math.exp(-x", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Describe the formula for the Manhattan distance between two points in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{Manhattan distance} = |x_1 - x_2| + |y_1 - y_2|\n$$\n\n```python\ndef manhattan_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Show the formula for the volume of a cone in LaTeX, then write a Python function that computes it.", "text": "$$\nV = \\frac{1}{3} \\pi r^2 h\n$$\n\n```python\nimport math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Compute the volume of a cone given its radius and height.\n    \n    Parameters:\n    radius (float): The radius of the base of the", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.5, "prompt": "Provide the formula for Shannon entropy of a discrete probability distribution in LaTeX, and implement a Python function to calculate it.", "text": "$$\nH(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i)\n$$\n\n```python\nimport math\n\ndef shannon_entropy(probabilities):\n    \"\"\"\n    Calculate the Shannon entropy of a discrete probability distribution.\n    \n    Parameters:\n    probabilities (", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Explain the implementation of the Adam optimizer, providing the Python code for a simplified step and the LaTeX equations for the update steps.", "text": "$$\n\\begin{aligned}\n\\text{momentum} &= \\beta_1 \\cdot \\text{momentum} + (1 - \\beta_1) \\cdot \\nabla_\\theta J(\\theta) \\\\\n\\text{corrected\\_momentum} &= \\frac{\\text{moment", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "In a Python docstring, describe the mathematical formula for variance, \\sigma^2 = \\frac{\\sum (x_i - \\mu)^2}{N}, using LaTeX, then provide a function that calculates it.", "text": "$$\n\\sigma^2 = \\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}\n$$\n\n```python\ndef calculate_variance(data):\n    \"\"\"\n    Calculate the population variance of a list of numbers using the formula:\n    \n    \\\\sigma^2 = \\\\", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Provide the formula for the sigmoid function in LaTeX, then implement it as a Python function using numpy.", "text": "$$\n\\sigma(x) = \\frac{1}{1 + e^{-x}}\n$$\n\n```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Explain the concept of linear regression. Show the formula for a simple linear model, y = \\beta_0 + \\beta_1 x + \\epsilon, in LaTeX and then write a Python function to predict y given x, beta_0, and beta_1.", "text": "$$\ny = \\beta_0 + \\beta_1 x + \\epsilon\n$$\n\n```python\ndef predict_y(x, beta_0, beta_1):\n    \"\"\"\n    Predicts the value of y given x, intercept beta_0, and slope beta_1.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Describe the formula for calculating the Euclidean distance between two points P_1 and P_2 in LaTeX, then write a Python function that takes two tuples and returns the distance.", "text": "$$\nd = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\n$$\n\n```python\ndef euclidean_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Show the formula for the dot product of two n-dimensional vectors in LaTeX, then write a Python function to compute it.", "text": "$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^{n} a_i b_i\n$$\n\n```python\ndef dot_product(v1, v2):\n    \"\"\"\n    Compute the dot product of two n-dimensional vectors.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Explain the Rectified Linear Unit (ReLU) activation function with its formula in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\max(0, x)\n$$\n\n```python\nimport numpy as np\n\ndef relu(x):\n    return np.maximum(0, x)\n\n# Example usage\ninput_values = [-1, 0, 1, -2, 3]\noutput_values = [relu(x", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Provide the formula for the mean squared error (MSE) loss function in LaTeX, then write a Python function that calculates it for two numpy arrays.", "text": "$$\n\\text{MSE} = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2\n$$\n\n```python\nimport numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"\n    Calculate the", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Describe the physics formula for kinetic energy, K = \\frac{1}{2}mv^2, in LaTeX, then write a Python function to compute it.", "text": "$$\nK = \\frac{1}{2}mv^2\n$$\n\n```python\ndef kinetic_energy(m, v):\n    \"\"\"\n    Compute the kinetic energy of an object given its mass and velocity.\n    \n    Parameters:\n    m (float): mass of the object in kilograms\n    v (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Show the recurrence relation for the Fibonacci sequence in LaTeX, and then write a recursive Python function to compute the nth Fibonacci number.", "text": "$$\nF(n) = F(n-1) + F(n-2) \\quad \\text{with} \\quad F(0) = 0 \\quad \\text{and} \\quad F(1) = 1\n$$\n\n```python\ndef fibonacci(n):\n    if n <= ", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Provide the formula for softmax activation in LaTeX, and then implement it in Python.", "text": "$$\n\\text{softmax}(z_i) = \\frac{e^{z_i}}{\\sum_{j} e^{z_j}}\n$$\n\n```python\nimport numpy as np\n\ndef softmax(z):\n    # Subtract the max value for numerical stability\n    z = z - np.max(z, axis=", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Explain the formula for a Gaussian distribution in LaTeX, then write a Python function that samples from it using numpy.", "text": "$$\nf(x \\mid \\mu, \\sigma^2) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left(-\\frac{(x - \\mu)^2}{2\\sigma^2}\\right)\n$$\n\n```python\nimport numpy as np\n\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Describe the formula for calculating cosine similarity between two vectors A and B in LaTeX, then implement a Python function for it.", "text": "$$\n\\text{cosine similarity} = \\frac{\\mathbf{A} \\cdot \\mathbf{B}}{\\|\\mathbf{A}\\| \\|\\mathbf{B}\\|} = \\frac{\\sum_{i=1}^{n} A_i B_i}{\\sqrt{\\", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Show the mathematical definition of a matrix transpose, (A^T)_{ij} = A_{ji}, in LaTeX, and provide a Python numpy example.", "text": "$$\n(A^T)_{ij} = A_{ji}\n$$\n\n```python\nimport numpy as np\n\n# Define a sample matrix A\nA = np.array([[1, 2, 3],\n              [4, 5, 6]])\n\n# Compute the transpose of A\nA_T =", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Provide the formula for the cross-entropy loss for binary classification in LaTeX, then write a Python function to compute it.", "text": "$$\nH(p, q) = -\\sum_{i} p_i \\log q_i\n$$\n\n```python\nimport numpy as np\n\ndef binary_cross_entropy(p, q):\n    \"\"\"\n    Compute the binary cross-entropy loss between true probabilities p and predicted probabilities q.\n    \n    Parameters:\n    p", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Describe the equation of a plane in 3D space, Ax + By + Cz + D = 0, using LaTeX, then write a Python function that checks if a point (x,y,z) lies on the plane.", "text": "$$\nAx + By + Cz + D = 0\n$$\n\n```python\ndef point_on_plane(x, y, z, A, B, C, D):\n    \"\"\"\n    Check if a point (x, y, z) lies on the plane Ax + By + Cz + D =", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Show the formula for the determinant of a 2x2 matrix in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{det} \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} = ad - bc\n$$\n\n```python\ndef determinant_2x2(a, b, c, d):\n    return a * d - b * c\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Provide the formula for the Leaky ReLU activation function in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\begin{cases} \nx & \\text{if } x \\geq 0 \\\\\n\\alpha x & \\text{if } x < 0 \n\\end{cases}\n$$\n\n```python\nimport numpy as np\n\ndef leaky_relu(x, alpha=0", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Describe the simple interest formula, I = P \\cdot r \\cdot t, in LaTeX, then create a Python function to calculate it.", "text": "$$\nI = P \\cdot r \\cdot t\n$$\n\n```python\ndef simple_interest(P, r, t):\n    \"\"\"\n    Calculate the simple interest using the formula I = P * r * t.\n    \n    Parameters:\n    P (float): Principal amount (initial investment)\n    r (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Show the formula for the area of a trapezoid in LaTeX, and then write a Python function that computes it.", "text": "$$\nA = \\frac{1}{2} (b_1 + b_2) h\n$$\n\n```python\ndef trapezoid_area(b1, b2, h):\n    \"\"\"\n    Compute the area of a trapezoid given the lengths of the two parallel sides (b1", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Provide the formula for the hyperbolic tangent (tanh) activation function in LaTeX, then implement it in Python.", "text": "$$\n\\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}}\n$$\n\n```python\nimport numpy as np\n\ndef tanh(x):\n    return (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Describe the formula for the Manhattan distance between two points in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{Manhattan distance} = |x_1 - x_2| + |y_1 - y_2|\n$$\n\n```python\ndef manhattan_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Show the formula for the volume of a cone in LaTeX, then write a Python function that computes it.", "text": "$$\nV = \\frac{1}{3} \\pi r^2 h\n$$\n\n```python\nimport math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Compute the volume of a cone given its radius and height.\n    \n    Parameters:\n    radius (float): The radius of the base of the", "leading_latex": true}
{"feature": "code_feature", "alpha": -2.0, "prompt": "Provide the formula for Shannon entropy of a discrete probability distribution in LaTeX, and implement a Python function to calculate it.", "text": "$$\nH(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i)\n$$\n\n```python\nimport math\n\ndef shannon_entropy(probabilities):\n    \"\"\"\n    Calculate the Shannon entropy of a discrete probability distribution.\n    \n    Parameters:\n    probabilities (", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Explain the implementation of the Adam optimizer, providing the Python code for a simplified step and the LaTeX equations for the update steps.", "text": "$$\n\\begin{aligned}\n\\text{momentum} &= \\beta_1 \\cdot \\text{momentum} + (1 - \\beta_1) \\cdot \\nabla_\\theta J(\\theta) \\\\\n\\text{corrected\\_momentum} &= \\frac{\\text{moment", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "In a Python docstring, describe the mathematical formula for variance, \\sigma^2 = \\frac{\\sum (x_i - \\mu)^2}{N}, using LaTeX, then provide a function that calculates it.", "text": "$$\n\\sigma^2 = \\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}\n$$\n\n```python\ndef calculate_variance(data):\n    \"\"\"\n    Calculate the population variance of a list of numbers using the formula:\n    \n    \\\\sigma^2 = \\\\", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Provide the formula for the sigmoid function in LaTeX, then implement it as a Python function using numpy.", "text": "$$\n\\sigma(x) = \\frac{1}{1 + e^{-x}}\n$$\n\n```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Explain the concept of linear regression. Show the formula for a simple linear model, y = \\beta_0 + \\beta_1 x + \\epsilon, in LaTeX and then write a Python function to predict y given x, beta_0, and beta_1.", "text": "$$\ny = \\beta_0 + \\beta_1 x + \\epsilon\n$$\n\n```python\ndef predict_y(x, beta_0, beta_1):\n    \"\"\"\n    Predicts the value of y given x, intercept beta_0, and slope beta_1.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Describe the formula for calculating the Euclidean distance between two points P_1 and P_2 in LaTeX, then write a Python function that takes two tuples and returns the distance.", "text": "$$\nd = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\n$$\n\n```python\ndef euclidean_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Show the formula for the dot product of two n-dimensional vectors in LaTeX, then write a Python function to compute it.", "text": "$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^{n} a_i b_i\n$$\n\n```python\ndef dot_product(v1, v2):\n    \"\"\"\n    Compute the dot product of two n-dimensional vectors.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Explain the Rectified Linear Unit (ReLU) activation function with its formula in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\max(0, x)\n$$\n\n```python\nimport numpy as np\n\ndef relu(x):\n    return np.maximum(0, x)\n\n# Example usage\ninput_values = [-2, -1, 0, 1, 2]\noutput_values = [relu(x", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Provide the formula for the mean squared error (MSE) loss function in LaTeX, then write a Python function that calculates it for two numpy arrays.", "text": "$$\n\\text{MSE} = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2\n$$\n\n```python\nimport numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"\n    Calculate the", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Describe the physics formula for kinetic energy, K = \\frac{1}{2}mv^2, in LaTeX, then write a Python function to compute it.", "text": "$$\nK = \\frac{1}{2}mv^2\n$$\n\n```python\ndef kinetic_energy(m, v):\n    \"\"\"\n    Compute the kinetic energy of an object given its mass and velocity.\n    \n    Parameters:\n    m (float): mass of the object in kilograms\n    v (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Show the recurrence relation for the Fibonacci sequence in LaTeX, and then write a recursive Python function to compute the nth Fibonacci number.", "text": "$$\nF(n) = F(n-1) + F(n-2) \\quad \\text{with} \\quad F(0) = 0 \\quad \\text{and} \\quad F(1) = 1\n$$\n\n```python\ndef fibonacci(n):\n    if n <= ", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Provide the formula for softmax activation in LaTeX, and then implement it in Python.", "text": "$$\n\\text{softmax}(z_i) = \\frac{e^{z_i}}{\\sum_{j} e^{z_j}}\n$$\n\n```python\nimport numpy as np\n\ndef softmax(z):\n    # Subtract the max value for numerical stability\n    z = z - np.max(z, axis=", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Explain the formula for a Gaussian distribution in LaTeX, then write a Python function that samples from it using numpy.", "text": "$$\nf(x \\mid \\mu, \\sigma^2) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left(-\\frac{(x - \\mu)^2}{2\\sigma^2}\\right)\n$$\n\n```python\nimport numpy as np\n\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Describe the formula for calculating cosine similarity between two vectors A and B in LaTeX, then implement a Python function for it.", "text": "$$\n\\text{cosine similarity} = \\frac{\\mathbf{A} \\cdot \\mathbf{B}}{\\|\\mathbf{A}\\| \\|\\mathbf{B}\\|} = \\frac{\\sum_{i=1}^{n} A_i B_i}{\\sqrt{\\", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Show the mathematical definition of a matrix transpose, (A^T)_{ij} = A_{ji}, in LaTeX, and provide a Python numpy example.", "text": "$$\n(A^T)_{ij} = A_{ji}\n$$\n\n```python\nimport numpy as np\n\n# Define a sample matrix A\nA = np.array([[1, 2, 3],\n              [4, 5, 6]])\n\n# Compute the transpose of A\nA_T =", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Provide the formula for the cross-entropy loss for binary classification in LaTeX, then write a Python function to compute it.", "text": "$$\nH(p, q) = -\\sum_{i} p_i \\log q_i\n$$\n\n```python\nimport numpy as np\n\ndef binary_cross_entropy(p, q):\n    \"\"\"\n    Compute the binary cross-entropy loss between true probabilities p and predicted probabilities q.\n    \n    Parameters:\n    p", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Describe the equation of a plane in 3D space, Ax + By + Cz + D = 0, using LaTeX, then write a Python function that checks if a point (x,y,z) lies on the plane.", "text": "$$\nAx + By + Cz + D = 0\n$$\n\n```python\ndef point_on_plane(x, y, z, A, B, C, D):\n    \"\"\"\n    Check if a point (x, y, z) lies on the plane Ax + By + Cz + D =", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Show the formula for the determinant of a 2x2 matrix in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{det} \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} = ad - bc\n$$\n\n```python\ndef determinant_2x2(a, b, c, d):\n    return a * d - b * c\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Provide the formula for the Leaky ReLU activation function in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\begin{cases} \nx & \\text{if } x \\geq 0 \\\\\n\\alpha x & \\text{if } x < 0 \n\\end{cases}\n$$\n\n```python\nimport numpy as np\n\ndef leaky_relu(x, alpha=0", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Describe the simple interest formula, I = P \\cdot r \\cdot t, in LaTeX, then create a Python function to calculate it.", "text": "$$\nI = P \\cdot r \\cdot t\n$$\n\n```python\ndef simple_interest(P, r, t):\n    \"\"\"\n    Calculate the simple interest using the formula I = P * r * t.\n    \n    Parameters:\n    P (float): Principal amount (initial investment)\n    r (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Show the formula for the area of a trapezoid in LaTeX, and then write a Python function that computes it.", "text": "$$\nA = \\frac{1}{2} (b_1 + b_2) h\n$$\n\n```python\ndef trapezoid_area(b1, b2, h):\n    \"\"\"\n    Compute the area of a trapezoid given the lengths of the two parallel sides (b1", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Provide the formula for the hyperbolic tangent (tanh) activation function in LaTeX, then implement it in Python.", "text": "$$\n\\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}}\n$$\n\n```python\nimport numpy as np\n\ndef tanh(x):\n    return (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Describe the formula for the Manhattan distance between two points in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{Manhattan distance} = |x_1 - x_2| + |y_1 - y_2|\n$$\n\n```python\ndef manhattan_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Show the formula for the volume of a cone in LaTeX, then write a Python function that computes it.", "text": "$$\nV = \\frac{1}{3} \\pi r^2 h\n$$\n\n```python\nimport math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Compute the volume of a cone given its radius and height.\n    \n    Parameters:\n    radius (float): The radius of the base of the", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.5, "prompt": "Provide the formula for Shannon entropy of a discrete probability distribution in LaTeX, and implement a Python function to calculate it.", "text": "$$\nH(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i)\n$$\n\n```python\nimport math\n\ndef shannon_entropy(probabilities):\n    \"\"\"\n    Calculate the Shannon entropy of a discrete probability distribution.\n    \n    Parameters:\n    probabilities (", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Explain the implementation of the Adam optimizer, providing the Python code for a simplified step and the LaTeX equations for the update steps.", "text": "$$\n\\begin{aligned}\n\\text{momentum} &= \\beta_1 \\cdot \\text{momentum} + (1 - \\beta_1) \\cdot \\nabla_\\theta J(\\theta) \\\\\n\\text{corrected\\_momentum} &= \\frac{\\text{moment", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "In a Python docstring, describe the mathematical formula for variance, \\sigma^2 = \\frac{\\sum (x_i - \\mu)^2}{N}, using LaTeX, then provide a function that calculates it.", "text": "$$\n\\sigma^2 = \\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}\n$$\n\n```python\ndef calculate_variance(data):\n    \"\"\"\n    Calculate the population variance of a list of numbers using the formula:\n    \n    \\\\sigma^2 = \\\\", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Provide the formula for the sigmoid function in LaTeX, then implement it as a Python function using numpy.", "text": "$$\n\\sigma(x) = \\frac{1}{1 + e^{-x}}\n$$\n\n```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Explain the concept of linear regression. Show the formula for a simple linear model, y = \\beta_0 + \\beta_1 x + \\epsilon, in LaTeX and then write a Python function to predict y given x, beta_0, and beta_1.", "text": "$$\ny = \\beta_0 + \\beta_1 x + \\epsilon\n$$\n\n```python\ndef predict_y(x, beta_0, beta_1):\n    \"\"\"\n    Predicts the value of y given x, intercept beta_0, and slope beta_1.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Describe the formula for calculating the Euclidean distance between two points P_1 and P_2 in LaTeX, then write a Python function that takes two tuples and returns the distance.", "text": "$$\nd = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\n$$\n\n```python\ndef euclidean_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Show the formula for the dot product of two n-dimensional vectors in LaTeX, then write a Python function to compute it.", "text": "$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^{n} a_i b_i\n$$\n\n```python\ndef dot_product(v1, v2):\n    \"\"\"\n    Compute the dot product of two n-dimensional vectors.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Explain the Rectified Linear Unit (ReLU) activation function with its formula in LaTeX, then implement it in Python.", "text": "$$\n\\text{ReLU}(x) = \\max(0, x)\n$$\n\n```python\nimport numpy as np\n\ndef relu(x):\n    return np.maximum(0, x)\n\n# Example usage\ninput_values = [-2, -1, 0, 1, 2]\noutput_values", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Provide the formula for the mean squared error (MSE) loss function in LaTeX, then write a Python function that calculates it for two numpy arrays.", "text": "$$\n\\text{MSE} = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2\n$$\n\n```python\nimport numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"\n    Calculate the", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Describe the physics formula for kinetic energy, K = \\frac{1}{2}mv^2, in LaTeX, then write a Python function to compute it.", "text": "$$\nK = \\frac{1}{2}mv^2\n$$\n\n```python\ndef kinetic_energy(m, v):\n    \"\"\"\n    Compute the kinetic energy of an object given its mass and velocity.\n    \n    Parameters:\n    m (float): mass of the object in kilograms\n    v (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Show the recurrence relation for the Fibonacci sequence in LaTeX, and then write a recursive Python function to compute the nth Fibonacci number.", "text": "$$\nF(n) = F(n-1) + F(n-2) \\quad \\text{with} \\quad F(0) = 0 \\quad \\text{and} \\quad F(1) = 1\n$$\n\n```python\ndef fibonacci(n):\n    if n <= ", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Provide the formula for softmax activation in LaTeX, and then implement it in Python.", "text": "$$\n\\text{softmax}(z_i) = \\frac{e^{z_i}}{\\sum_{j} e^{z_j}}\n$$\n\n```python\nimport numpy as np\n\ndef softmax(z):\n    # Subtract the max value for numerical stability\n    z = z - np.max(z, axis=", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Explain the formula for a Gaussian distribution in LaTeX, then write a Python function that samples from it using numpy.", "text": "$$\nf(x \\mid \\mu, \\sigma^2) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left(-\\frac{(x - \\mu)^2}{2\\sigma^2}\\right)\n$$\n\n```python\nimport numpy as np\n\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Describe the formula for calculating cosine similarity between two vectors A and B in LaTeX, then implement a Python function for it.", "text": "$$\n\\text{cosine similarity} = \\frac{\\mathbf{A} \\cdot \\mathbf{B}}{\\|\\mathbf{A}\\| \\|\\mathbf{B}\\|} = \\frac{\\sum_{i=1}^{n} A_i B_i}{\\sqrt{\\", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Show the mathematical definition of a matrix transpose, (A^T)_{ij} = A_{ji}, in LaTeX, and provide a Python numpy example.", "text": "$$\n(A^T)_{ij} = A_{ji}\n$$\n\n```python\nimport numpy as np\n\n# Define a sample matrix A\nA = np.array([[1, 2, 3],\n              [4, 5, 6]])\n\n# Compute the transpose of A\nA_T =", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Provide the formula for the cross-entropy loss for binary classification in LaTeX, then write a Python function to compute it.", "text": "$$\nH(p, q) = -\\sum_{i} p_i \\log q_i\n$$\n\n```python\nimport numpy as np\n\ndef binary_cross_entropy(p, q):\n    \"\"\"\n    Compute the binary cross-entropy loss between true probabilities p and predicted probabilities q.\n    \n    Parameters:\n    p", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Describe the equation of a plane in 3D space, Ax + By + Cz + D = 0, using LaTeX, then write a Python function that checks if a point (x,y,z) lies on the plane.", "text": "$$\nAx + By + Cz + D = 0\n$$\n\n```python\ndef point_on_plane(x, y, z, A, B, C, D):\n    \"\"\"\n    Check if a point (x, y, z) lies on the plane Ax + By + Cz + D =", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Show the formula for the determinant of a 2x2 matrix in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{det} \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} = ad - bc\n$$\n\n```python\ndef determinant_2x2(a, b, c, d):\n    \"\"\"\n    Calculate the determinant of a 2x2 matrix.\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Provide the formula for the Leaky ReLU activation function in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\begin{cases} \nx & \\text{if } x \\geq 0 \\\\\n\\alpha x & \\text{if } x < 0 \n\\end{cases}\n$$\n\n```python\nimport numpy as np\n\ndef leaky_relu(x, alpha=0", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Describe the simple interest formula, I = P \\cdot r \\cdot t, in LaTeX, then create a Python function to calculate it.", "text": "$$\nI = P \\cdot r \\cdot t\n$$\n\n```python\ndef simple_interest(P, r, t):\n    \"\"\"\n    Calculate the simple interest using the formula I = P * r * t.\n    \n    Parameters:\n    P (float): Principal amount (initial investment)\n    r (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Show the formula for the area of a trapezoid in LaTeX, and then write a Python function that computes it.", "text": "$$\nA = \\frac{1}{2} (b_1 + b_2) h\n$$\n\n```python\ndef trapezoid_area(b1, b2, h):\n    \"\"\"\n    Compute the area of a trapezoid given the lengths of the two parallel sides (b1", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Provide the formula for the hyperbolic tangent (tanh) activation function in LaTeX, then implement it in Python.", "text": "$$\n\\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}}\n$$\n\n```python\nimport numpy as np\n\ndef tanh(x):\n    return (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Describe the formula for the Manhattan distance between two points in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{Manhattan distance} = |x_1 - x_2| + |y_1 - y_2|\n$$\n\n```python\ndef manhattan_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Show the formula for the volume of a cone in LaTeX, then write a Python function that computes it.", "text": "$$\nV = \\frac{1}{3} \\pi r^2 h\n$$\n\n```python\nimport math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Compute the volume of a cone given its radius and height.\n    \n    Parameters:\n    radius (float): The radius of the base of the", "leading_latex": true}
{"feature": "code_feature", "alpha": -1.0, "prompt": "Provide the formula for Shannon entropy of a discrete probability distribution in LaTeX, and implement a Python function to calculate it.", "text": "$$\nH(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i)\n$$\n\n```python\nimport math\n\ndef shannon_entropy(probabilities):\n    \"\"\"\n    Calculate the Shannon entropy of a discrete probability distribution.\n    \n    Parameters:\n    probabilities (", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Explain the implementation of the Adam optimizer, providing the Python code for a simplified step and the LaTeX equations for the update steps.", "text": "$$\n\\begin{aligned}\n\\text{momentum} &= \\beta_1 \\cdot \\text{momentum} + (1 - \\beta_1) \\cdot \\nabla_\\theta J(\\theta) \\\\\n\\text{corrected\\_momentum} &= \\frac{\\text{moment", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "In a Python docstring, describe the mathematical formula for variance, \\sigma^2 = \\frac{\\sum (x_i - \\mu)^2}{N}, using LaTeX, then provide a function that calculates it.", "text": "$$\n\\sigma^2 = \\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}\n$$\n\n```python\ndef calculate_variance(data):\n    \"\"\"\n    Calculate the population variance of a list of numbers using the formula:\n    \n    \\\\sigma^2 = \\\\", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Provide the formula for the sigmoid function in LaTeX, then implement it as a Python function using numpy.", "text": "$$\n\\sigma(x) = \\frac{1}{1 + e^{-x}}\n$$\n\n```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Explain the concept of linear regression. Show the formula for a simple linear model, y = \\beta_0 + \\beta_1 x + \\epsilon, in LaTeX and then write a Python function to predict y given x, beta_0, and beta_1.", "text": "$$\ny = \\beta_0 + \\beta_1 x + \\epsilon\n$$\n\n```python\ndef predict_y(x, beta_0, beta_1):\n    \"\"\"\n    Predicts the value of y given x, intercept beta_0, and slope beta_1.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Describe the formula for calculating the Euclidean distance between two points P_1 and P_2 in LaTeX, then write a Python function that takes two tuples and returns the distance.", "text": "$$\nd = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\n$$\n\n```python\ndef euclidean_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Show the formula for the dot product of two n-dimensional vectors in LaTeX, then write a Python function to compute it.", "text": "$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^{n} a_i b_i\n$$\n\n```python\ndef dot_product(v1, v2):\n    \"\"\"\n    Compute the dot product of two n-dimensional vectors.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Explain the Rectified Linear Unit (ReLU) activation function with its formula in LaTeX, then implement it in Python.", "text": "$$\n\\text{ReLU}(x) = \\max(0, x)\n$$\n\n```python\nimport numpy as np\n\ndef relu(x):\n    return np.maximum(0, x)\n\n# Example usage\ninput_values = [-2, -1, 0, 1, 2]\noutputs =", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Provide the formula for the mean squared error (MSE) loss function in LaTeX, then write a Python function that calculates it for two numpy arrays.", "text": "$$\n\\text{MSE} = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2\n$$\n\n```python\nimport numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"\n    Calculate the", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Describe the physics formula for kinetic energy, K = \\frac{1}{2}mv^2, in LaTeX, then write a Python function to compute it.", "text": "$$\nK = \\frac{1}{2}mv^2\n$$\n\n```python\ndef kinetic_energy(m, v):\n    \"\"\"\n    Compute the kinetic energy of an object given its mass and velocity.\n    \n    Parameters:\n    m (float): mass of the object in kilograms\n    v (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Show the recurrence relation for the Fibonacci sequence in LaTeX, and then write a recursive Python function to compute the nth Fibonacci number.", "text": "$$\nF(n) = F(n-1) + F(n-2) \\quad \\text{with} \\quad F(0) = 0 \\quad \\text{and} \\quad F(1) = 1\n$$\n\n```python\ndef fibonacci(n):\n    if n <= ", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Provide the formula for softmax activation in LaTeX, and then implement it in Python.", "text": "$$\n\\text{softmax}(z_i) = \\frac{e^{z_i}}{\\sum_{j} e^{z_j}}\n$$\n\n```python\nimport numpy as np\n\ndef softmax(z):\n    # Subtract the max value for numerical stability\n    z = z - np.max(z, axis=", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Explain the formula for a Gaussian distribution in LaTeX, then write a Python function that samples from it using numpy.", "text": "$$\nf(x \\mid \\mu, \\sigma^2) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left(-\\frac{(x - \\mu)^2}{2\\sigma^2}\\right)\n$$\n\n```python\nimport numpy as np\n\n", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Describe the formula for calculating cosine similarity between two vectors A and B in LaTeX, then implement a Python function for it.", "text": "$$\n\\text{cosine similarity} = \\frac{\\mathbf{A} \\cdot \\mathbf{B}}{\\|\\mathbf{A}\\| \\|\\mathbf{B}\\|} = \\frac{\\sum_{i=1}^{n} A_i B_i}{\\sqrt{\\", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Show the mathematical definition of a matrix transpose, (A^T)_{ij} = A_{ji}, in LaTeX, and provide a Python numpy example.", "text": "$$\n(A^T)_{ij} = A_{ji}\n$$\n\n```python\nimport numpy as np\n\n# Define a sample matrix A\nA = np.array([[1, 2, 3],\n              [4, 5, 6]])\n\n# Compute the transpose of A\nA_T =", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Provide the formula for the cross-entropy loss for binary classification in LaTeX, then write a Python function to compute it.", "text": "$$\n\\mathcal{L} = -\\frac{1}{N} \\sum_{i=1}^{N} \\left[ y_i \\log(\\hat{y}_i) + (1 - y_i) \\log(1 - \\hat{y}_i) \\right]\n$$", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Describe the equation of a plane in 3D space, Ax + By + Cz + D = 0, using LaTeX, then write a Python function that checks if a point (x,y,z) lies on the plane.", "text": "$$\nAx + By + Cz + D = 0\n$$\n\n```python\ndef point_on_plane(x, y, z, A, B, C, D):\n    \"\"\"\n    Check if a point (x, y, z) lies on the plane Ax + By + Cz + D =", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Show the formula for the determinant of a 2x2 matrix in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{det} \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} = ad - bc\n$$\n\n```python\ndef determinant_2x2(a, b, c, d):\n    \"\"\"\n    Calculate the determinant of a 2x2 matrix.\n", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Provide the formula for the Leaky ReLU activation function in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\begin{cases} \nx & \\text{if } x \\geq 0 \\\\\n\\alpha x & \\text{if } x < 0 \n\\end{cases}\n$$\n\n```python\nimport numpy as np\n\ndef leaky_relu(x, alpha=0", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Describe the simple interest formula, I = P \\cdot r \\cdot t, in LaTeX, then create a Python function to calculate it.", "text": "$$\nI = P \\cdot r \\cdot t\n$$\n\n```python\ndef simple_interest(P, r, t):\n    \"\"\"\n    Calculate the simple interest using the formula I = P * r * t.\n    \n    Parameters:\n    P (float): Principal amount (initial investment)\n    r (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Show the formula for the area of a trapezoid in LaTeX, and then write a Python function that computes it.", "text": "$$\nA = \\frac{1}{2} (b_1 + b_2) h\n$$\n\n```python\ndef trapezoid_area(b1, b2, h):\n    \"\"\"\n    Compute the area of a trapezoid given the lengths of the two parallel sides (b1", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Provide the formula for the hyperbolic tangent (tanh) activation function in LaTeX, then implement it in Python.", "text": "$$\n\\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}}\n$$\n\n```python\nimport numpy as np\n\ndef tanh(x):\n    return (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Describe the formula for the Manhattan distance between two points in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{Manhattan distance} = |x_1 - x_2| + |y_1 - y_2|\n$$\n\n```python\ndef manhattan_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Show the formula for the volume of a cone in LaTeX, then write a Python function that computes it.", "text": "$$\nV = \\frac{1}{3} \\pi r^2 h\n$$\n\n```python\nimport math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Compute the volume of a cone given its radius and height.\n    \n    Parameters:\n    radius (float): The radius of the base of the", "leading_latex": true}
{"feature": "code_feature", "alpha": 0.0, "prompt": "Provide the formula for Shannon entropy of a discrete probability distribution in LaTeX, and implement a Python function to calculate it.", "text": "$$\nH(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i)\n$$\n\n```python\nimport math\n\ndef shannon_entropy(probabilities):\n    \"\"\"\n    Calculate the Shannon entropy of a discrete probability distribution.\n    \n    Parameters:\n    probabilities (", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Explain the implementation of the Adam optimizer, providing the Python code for a simplified step and the LaTeX equations for the update steps.", "text": "$$\n\\begin{aligned}\n\\text{Step 1: Compute momentum terms} \\\\\nm_t &= \\beta_1 \\cdot m_{t-1} + (1 - \\beta_1) \\cdot \\nabla_\\theta J(\\theta) \\\\\nv_t &= \\beta_2 \\", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "In a Python docstring, describe the mathematical formula for variance, \\sigma^2 = \\frac{\\sum (x_i - \\mu)^2}{N}, using LaTeX, then provide a function that calculates it.", "text": "$$\n\\sigma^2 = \\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}\n$$\n\n```python\ndef calculate_variance(data):\n    \"\"\"\n    Calculate the population variance of a list of numbers using the formula:\n    \n    \\\\sigma^2 = \\\\", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Provide the formula for the sigmoid function in LaTeX, then implement it as a Python function using numpy.", "text": "$$\n\\sigma(x) = \\frac{1}{1 + e^{-x}}\n$$\n\n```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n```", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Explain the concept of linear regression. Show the formula for a simple linear model, y = \\beta_0 + \\beta_1 x + \\epsilon, in LaTeX and then write a Python function to predict y given x, beta_0, and beta_1.", "text": "$$\ny = \\beta_0 + \\beta_1 x + \\epsilon\n$$\n\n```python\ndef predict_y(x, beta_0, beta_1):\n    \"\"\"\n    Predicts the value of y given x, intercept beta_0, and slope beta_1.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Describe the formula for calculating the Euclidean distance between two points P_1 and P_2 in LaTeX, then write a Python function that takes two tuples and returns the distance.", "text": "$$\nd = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\n$$\n\n```python\ndef euclidean_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Show the formula for the dot product of two n-dimensional vectors in LaTeX, then write a Python function to compute it.", "text": "$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^{n} a_i b_i\n$$\n\n```python\ndef dot_product(v1, v2):\n    \"\"\"\n    Compute the dot product of two n-dimensional vectors.\n    \n    Parameters:\n   ", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Explain the Rectified Linear Unit (ReLU) activation function with its formula in LaTeX, then implement it in Python.", "text": "$$\n\\text{ReLU}(x) = \\max(0, x)\n$$\n\n```python\nimport numpy as np\n\ndef relu(x):\n    return np.maximum(0, x)\n\n# Example usage\ninput_values = [-2, -1, 0, 1, 2]\noutputs =", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Provide the formula for the mean squared error (MSE) loss function in LaTeX, then write a Python function that calculates it for two numpy arrays.", "text": "$$\n\\text{MSE} = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2\n$$\n\n```python\nimport numpy as np\n\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"\n    Calculate the", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Describe the physics formula for kinetic energy, K = \\frac{1}{2}mv^2, in LaTeX, then write a Python function to compute it.", "text": "$$\nK = \\frac{1}{2}mv^2\n$$\n\n```python\ndef kinetic_energy(m, v):\n    \"\"\"\n    Compute the kinetic energy of an object given its mass and velocity.\n    \n    Parameters:\n    m (float): mass of the object in kilograms\n    v (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Show the recurrence relation for the Fibonacci sequence in LaTeX, and then write a recursive Python function to compute the nth Fibonacci number.", "text": "$$\nF(n) = F(n-1) + F(n-2) \\quad \\text{with} \\quad F(0) = 0 \\quad \\text{and} \\quad F(1) = 1\n$$\n\n```python\ndef fibonacci(n):\n    if n <= ", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Provide the formula for softmax activation in LaTeX, and then implement it in Python.", "text": "$$\n\\text{softmax}(z_i) = \\frac{e^{z_i}}{\\sum_{j} e^{z_j}}\n$$\n\n```python\nimport numpy as np\n\ndef softmax(z):\n    # Subtract the max value for numerical stability\n    z = z - np.max(z, axis=", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Explain the formula for a Gaussian distribution in LaTeX, then write a Python function that samples from it using numpy.", "text": "$$\nf(x \\mid \\mu, \\sigma^2) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left(-\\frac{(x - \\mu)^2}{2\\sigma^2}\\right)\n$$\n\n```python\nimport numpy as np\n\n", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Describe the formula for calculating cosine similarity between two vectors A and B in LaTeX, then implement a Python function for it.", "text": "$$\n\\text{cosine similarity} = \\frac{\\mathbf{A} \\cdot \\mathbf{B}}{\\|\\mathbf{A}\\| \\|\\mathbf{B}\\|} = \\frac{\\sum_{i=1}^{n} A_i B_i}{\\sqrt{\\", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Show the mathematical definition of a matrix transpose, (A^T)_{ij} = A_{ji}, in LaTeX, and provide a Python numpy example.", "text": "$$\n(A^T)_{ij} = A_{ji}\n$$\n\n```python\nimport numpy as np\n\n# Define a sample matrix A\nA = np.array([[1, 2, 3],\n              [4, 5, 6]])\n\n# Compute the transpose of A\nA_T =", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Provide the formula for the cross-entropy loss for binary classification in LaTeX, then write a Python function to compute it.", "text": "$$\n\\mathcal{L} = -\\frac{1}{N} \\sum_{i=1}^{N} \\left[ y_i \\log(\\hat{y}_i) + (1 - y_i) \\log(1 - \\hat{y}_i) \\right]\n$$", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Describe the equation of a plane in 3D space, Ax + By + Cz + D = 0, using LaTeX, then write a Python function that checks if a point (x,y,z) lies on the plane.", "text": "$$\nAx + By + Cz + D = 0\n$$\n\n```python\ndef point_on_plane(x, y, z, A, B, C, D):\n    \"\"\"\n    Check if a point (x, y, z) lies on the plane Ax + By + Cz + D =", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Show the formula for the determinant of a 2x2 matrix in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{det} \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} = ad - bc\n$$\n\n```python\ndef determinant_2x2(a, b, c, d):\n    \"\"\"\n    Calculate the determinant of a 2x2 matrix.\n", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Provide the formula for the Leaky ReLU activation function in LaTeX, then implement it in Python.", "text": "$$\nf(x) = \\begin{cases} \nx & \\text{if } x \\geq 0 \\\\\n\\alpha x & \\text{if } x < 0 \n\\end{cases}\n$$\n\n```python\nimport numpy as np\n\ndef leaky_relu(x, alpha=0", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Describe the simple interest formula, I = P \\cdot r \\cdot t, in LaTeX, then create a Python function to calculate it.", "text": "$$\nI = P \\cdot r \\cdot t\n$$\n\n```python\ndef simple_interest(P, r, t):\n    \"\"\"\n    Calculate the simple interest using the formula I = P * r * t.\n    \n    Parameters:\n    P (float): Principal amount (initial investment)\n    r (float):", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Show the formula for the area of a trapezoid in LaTeX, and then write a Python function that computes it.", "text": "$$\nA = \\frac{1}{2} (b_1 + b_2) h\n$$\n\n```python\ndef trapezoid_area(b1, b2, h):\n    \"\"\"\n    Compute the area of a trapezoid given the lengths of the two parallel bases (b1", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Provide the formula for the hyperbolic tangent (tanh) activation function in LaTeX, then implement it in Python.", "text": "$$\n\\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}}\n$$\n\n```python\nimport numpy as np\n\ndef tanh(x):\n    return (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Describe the formula for the Manhattan distance between two points in LaTeX, then write a Python function to calculate it.", "text": "$$\n\\text{Manhattan distance} = |x_1 - x_2| + |y_1 - y_2|\n$$\n\n```python\ndef manhattan_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Show the formula for the volume of a cone in LaTeX, then write a Python function that computes it.", "text": "$$\nV = \\frac{1}{3} \\pi r^2 h\n$$\n\n```python\nimport math\n\ndef cone_volume(radius, height):\n    \"\"\"\n    Compute the volume of a cone given its radius and height.\n    \n    Parameters:\n    radius (float): The radius of the base of the", "leading_latex": true}
{"feature": "code_feature", "alpha": 1.0, "prompt": "Provide the formula for Shannon entropy of a discrete probability distribution in LaTeX, and implement a Python function to calculate it.", "text": "$$\nH(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i)\n$$\n\n```python\nimport math\n\ndef shannon_entropy(probabilities):\n    \"\"\"\n    Calculate the Shannon entropy of a discrete probability distribution.\n    \n    Parameters:\n    probabilities (", "leading_latex": true}
